server {
  # Nginx escuchará conexiones en el puerto 80 dentro del contenedor.
  listen 80;

  # Bloque 'location /' para servir los archivos de tu aplicación React.
  location / {
    # 'root' especifica la carpeta donde Nginx buscará los archivos a servir.
    # Aquí es donde copiamos la 'build' de tu aplicación React.
    root /usr/share/nginx/html;
    
    # 'index' define los archivos predeterminados que Nginx intentará servir
    # si la URL apunta a un directorio (ej. si la URL es http://localhost/).
    index index.html index.htm;
    
    # MUY IMPORTANTE para aplicaciones React (Single Page Applications - SPAs) con routing.
    # 'try_files' intenta servir:
    # 1. '$uri': el archivo exacto solicitado (ej. /assets/logo.png).
    # 2. '$uri/': si es un directorio, intenta servir un índice dentro de él.
    # 3. '/index.html': Si lo anterior falla (por ejemplo, si el usuario navega a /tasks
    #    y no hay un archivo físico llamado 'tasks'), Nginx servirá tu 'index.html'.
    #    Esto permite que React Router (o tu librería de routing) se encargue de la ruta
    #    en el lado del cliente una vez que la aplicación React se ha cargado.
    try_files $uri $uri/ /index.html;
  }

  # Bloque 'location /api' para redirigir las solicitudes a tu Backend.
  # Cualquier solicitud que tu frontend haga que empiece con '/api' (ej. /api/tasks)
  # será interceptada por Nginx y enviada al backend.
  location /api {
    # 'proxy_pass' es la directiva que reenvía la solicitud.
    # 'http://backend:4000':
    #   - 'backend': Es el NOMBRE DEL SERVICIO de tu backend definido en 'docker-compose.yml'.
    #     Dentro de la red de Docker Compose, los servicios pueden comunicarse por sus nombres.
    #   - ':4000': Es el puerto en el que tu aplicación Node.js de backend está escuchando
    #     dentro de su propio contenedor.
    proxy_pass http://backend:4000;
    
    # Estas líneas son configuraciones estándar para un proxy inverso,
    # aseguran que las cabeceras de la solicitud se pasen correctamente.
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }
}